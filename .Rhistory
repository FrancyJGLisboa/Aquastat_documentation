# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWSnew [label = 'Input: \n New data to be updated', shape = folder, fillcolor = LightBlue]
SWSbase [label = 'Input: \n faoswsAquastatbaseline output', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Input: \n faoswsAquastatUpdate output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWSnew
{SWSbase, SWSnew, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWSnew [label = 'Input: \n New data to be updated', shape = folder, fillcolor = LightBlue]
SWSbase [label = 'Input: \n faoswsAquastatbaseline output', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Input: \n faoswsAquastatUpdate output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatUpdate output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWSnew
{SWSbase, SWSnew, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
getwd()
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire validated', shape = folder, fillcolor = Beige]
APIsourcing [label = 'API: \n External data sourced by \n by CIO - SWS', fillcolor = LightBlue]
APIdata [label = 'Dataset: \n data from external sources', shape = folder, fillcolor = LightBlue]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to produce \n the data to be periodically updated)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the data to be periodically updated)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module \n Updates aquastat_baseline \n with Quest. data \n and API data', fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire validated', shape = folder, fillcolor = Beige]
APIsourcing [label = 'API: \n External data sourced by \n by CIO - SWS', fillcolor = LightBlue]
APIdata [label = 'Dataset: \n data from external sources', shape = folder, fillcolor = LightBlue]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to produce \n the data to be periodically updated)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the data to be periodically updated)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module \n Updates aquastat_baseline \n with Quest. data \n and API data', fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire validated', shape = folder, fillcolor = Beige]
APIsourcing [label = 'API: \n External data sourced by \n by CIO - SWS', fillcolor = LightBlue]
APIdata [label = 'Dataset: \n data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to produce \n the data to be periodically updated)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the data to be periodically updated)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module \n Updates aquastat_baseline \n with Quest. data \n and API data', fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
getwd()
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'API: \n External data sourced \n by CIO - SWS', fillcolor = LightBlue]
APIdata [label = 'Dataset: \n data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to correct LTAs \n in the legacy data)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the legacy data corrected for LTAs)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_baseline \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = LightBlue]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to correct LTAs \n in the legacy data)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the legacy data corrected for LTAs)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_baseline \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
coordination [label = 'Source \n coordination \n between agencies', shape = folder, fillcolor = Beige]
Surveys [label = 'Source \n Country surveys \n and census', shape = folder, fillcolor = Beige]
Literature [label = 'Source \n Literature review', shape = folder, fillcolor = Beige]
focalpoint [label = 'Compilation: \n questionnaire filling \n by AQUASTAT \n national correspondent', shape = folder, fillcolor = Beige]
SWSQH [label = 'Harvester: \n questionnaire harvesting \n by CIO - SWS', fillcolor = LightBlue]
Newdata [label = 'Dataset: \n data harvested from questionnaire \n and SWS compliant', shape = folder, fillcolor = Beige]
QA1 [label = 'QAQC \n Manual Quality control \n of data harvested from questionnaire', fillcolor = PaleGreen]
Newdata_val [label = 'Dataset: \n validated questionnaire data', shape = folder, fillcolor = Beige]
APIsourcing [label = 'Process: \n faoswsAquastatExternal module', fillcolor = PaleGreen]
APIdata [label = 'Dataset: \n AQUASTAT data from external sources', shape = folder, fillcolor = Beige]
oldsystem [label = 'Database: \n Old Aquastat Working System', shape = folder, fillcolor = Beige]
Migration [label = 'Migration: \n legacy data into the SWS \n done by CIO - SWS', fillcolor = LightBlue]
legacydata [label = 'Dataset: \n aquastat_legacy dataset ', shape = folder, fillcolor = Beige]
faobaselineM [label = 'Process: \n SWS faoswsAquastatBaseline module \n (runs only once to correct LTAs \n in the legacy data)',  fillcolor = PaleGreen]
faobaseline [label = 'Dataset: \n SWS aquastat_baseline dataset \n (the legacy data corrected for LTAs)', shape = folder, fillcolor = Beige]
update [label = 'Process:: \n SWS faoswsAquastatUpdate module: \n 1. merges the questionnaire data, external data, and aquastat_baseline \n 2. flag conversion, \n 3. apply calculations, 4. impute data, 5.  apply recalculation', shape = square, fillcolor = PaleGreen]
updateddata [label = 'Dataset: \n updated aquastat_baseline dataset \n from SWS faoswsAquastatUpdate module ', shape = folder, fillcolor = Beige]
QA2 [label = 'Process: \n Automate Quality control \n by faoswsAquatsatValidation module', fillcolor = PaleGreen]
validationemail [label = 'Dataset: \n Validation output \n sent to the user by email (.csv file)', shape = folder, fillcolor = Beige]
QA3 [label = 'Process: \n Manual Quality control \n of faoswsAquatsatValidation module output', fillcolor = PaleGreen]
validated [label = 'Dataset: \n updated aquastat_baseline \n cleared by technical division', shape = folder, fillcolor = Beige]
AQUASWSdb [label = 'Dataset: \n updated AQUASTAT dataset \n saved in the SWS database', shape = folder, fillcolor = Beige]
Diss [label = 'Dissemination: \n  Web, publications, Apps', shape = folder, fillcolor = LightGrey]
# Flow
# edge definitions with the node IDs
{coordination, Surveys, Literature} -> focalpoint -> SWSQH -> Newdata -> QA1 -> Newdata_val -> update
{oldsystem} -> Migration -> legacydata -> faobaselineM -> faobaseline
{APIsourcing} -> APIdata -> update
{faobaseline} -> update -> updateddata -> QA2 -> validationemail -> QA3 -> validated -> AQUASWSdb -> Diss
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
SWSdb [label = 'Input \n data living in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive [label = 'Input \n  data living in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession [label = 'Input \n  data living in the session', shape = folder, fillcolor = Beige]
SWSdb2 [label = 'Output \n  data saved in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive2 [label = 'Output \n  data saved in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession2 [label = 'Output \n  data saved in the session', shape = folder, fillcolor = Beige]
dataset1 [label = 'Input \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
module [label = 'R module \n data processing and analysis', shape = square, fillcolor = LightBlue]
datatable1 [label = 'Data table(s) \n (auxiliary information)', shape = folder, fillcolor = LightGrey]
dataset2 [label =  'Output \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{SWSdb, SWSsharedrive, SWSsession} -> dataset1 -> module
{datatable1} -> module
dataset2 -> {SWSdb2, SWSsharedrive2, SWSsession2}
{module} -> dataset2
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
area [label = 'geographicAreaM49', shape = folder, fillcolor = Beige]
element [label = 'measuredElement', shape = folder, fillcolor = Beige]
time [label = 'timePointYears', shape = folder, fillcolor = Beige]
flagObs [label = 'flagObservationStatus', shape = folder, fillcolor = Beige]
flagMeth [label = 'flagMethod', shape = folder, fillcolor = Beige]
aquadataset [label = 'Typical SWS-compliant aquastat dataset', shape = folder, fillcolor = LightBlue]
# Flow
# edge definitions with the node IDs
{area, element, time, flagObs, flagMeth} -> aquadataset
}")
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The SWS aquastat_reference data table. AQUASTAT variable codes and names actually collected"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V', .(element_code, element_name, disseminated, calculated, source)],
caption = paste("AQUASTAT variable codes and names actually collected"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[source == 'O'],
caption = paste("AQUASTAT indicators (derived) calculated by AQUASTAT"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[Source == 'O'],
caption = paste("AQUASTAT indicators (derived) calculated by AQUASTAT"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'C'],
caption = paste("External data used in AQUASTAT"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d <- d[,.(element_code, element_name, disseminated, calculated, source)
knitr::kable(x = d[calculated %in% 'C'],
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d <- d[,.(element_code, element_name, disseminated, calculated, source)]
knitr::kable(x = d[calculated %in% 'C'],
caption = paste("AQUASTAT indicators"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)],
caption = paste("The Long-term average variables in the aquastat_reference datatable"),
booktabs = TRUE)
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS AQUASTAT dataset with FAOSTAT data', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1 - Add missing elements to the input \n 2-NAs to zero if full TS is empty \n 3-Calculations using calculation_rule \n 4- Apply primary variable rule after calculations', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n Calculated data', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1. Calculation \n using calculation_rule data table, \n 2. Replace wrong values \n by the right values, \n 3. Save the corrected data as aquastat_baseline  \n in SWS', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n corrected aquastat_legacy data \n named aquastat_baseline', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1. Calculation \n using calculation_rule data table, \n 2. Replace wrong values \n by the right values, \n 3. Save the corrected data as aquastat_baseline  \n in SWS', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n corrected aquastat_legacy data \n named aquastat_baseline', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1. Calculation \n using calculation_rule data table, \n 2. Replace wrong values \n by the right values in LTAs', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n corrected aquastat_legacy data \n named aquastat_baseline', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline \n in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
}")
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d,
caption = paste("The Long-term average variables in the aquastat_reference datatable"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d[, .(source_item_code, source_element_code, data_link)],
caption = paste("The Long-term average variables in the aquastat_reference datatable"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d[, .(source_item_code, source_element_code, data_link)],
caption = paste("Links to downloadable external data"),
booktabs = TRUE)
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
DT::datatable(x = d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
DT::datatable(d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.frame(data.table::fread("tables/aqua_external_source.csv"))
DT::datatable(d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- as.data.frame(d)
DT::datatable(d)
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- as.data.frame(d)
DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- tbl_df(d)
DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
d
# d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
# d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
DT::datatable(d)
require(kableExtra)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "500px", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "auto", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)]
kable(d) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "500px")
# knitr::kable(x = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)],
#              caption = paste("The Long-term average variables in the aquastat_reference datatable"),
#              booktabs = TRUE)
