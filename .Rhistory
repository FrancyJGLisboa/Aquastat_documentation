}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1. Calculation \n using calculation_rule data table, \n 2. Replace wrong values \n by the right values, \n 3. Save the corrected data as aquastat_baseline  \n in SWS', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n corrected aquastat_legacy data \n named aquastat_baseline', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# processing
Processing [label = 'Processing: \n 1. Calculation \n using calculation_rule data table, \n 2. Replace wrong values \n by the right values in LTAs', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n corrected aquastat_legacy data \n named aquastat_baseline', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline \n in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
}")
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d,
caption = paste("The Long-term average variables in the aquastat_reference datatable"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d[, .(source_item_code, source_element_code, data_link)],
caption = paste("The Long-term average variables in the aquastat_reference datatable"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(x = d[, .(source_item_code, source_element_code, data_link)],
caption = paste("Links to downloadable external data"),
booktabs = TRUE)
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
DT::datatable(x = d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
DT::datatable(d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.frame(data.table::fread("tables/aqua_external_source.csv"))
DT::datatable(d[, .(source_item_code, source_element_code, data_link)])
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- as.data.frame(d)
DT::datatable(d)
require(data.table)
require(DT)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- as.data.frame(d)
DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
d = d[, .(source_item_code, source_element_code, data_link)]
d <- tbl_df(d)
DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
d
# d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
d = data.table::fread("tables/aqua_external_source.csv")
# d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
DT::datatable(d)
require(kableExtra)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "500px", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "auto", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "200px")
#d = d[, .(source_item_code, source_element_code, data_link)]
# d <- tbl_df(d)
# DT::datatable(d)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)]
kable(d) %>%
kable_styling() %>%
scroll_box(width = "100%", height = "500px")
# knitr::kable(x = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)],
#              caption = paste("The Long-term average variables in the aquastat_reference datatable"),
#              booktabs = TRUE)
?kable_styling
??kable_styling
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
kable(d) %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(d) %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(d,  table.attr='class="table-fixed-header"') %>%
kableExtra::kable_styling(font_size = 12) %>%
scroll_box(width = "100%", height = "500px")
require(data.table)
require(DT)
require(dplyr)
require(kableExtra)
d = data.table::fread("tables/aqua_external_source.csv")
knitr::kable(d)
#            ,  table.attr='class="table-fixed-header"') %>%
# kableExtra::kable_styling(font_size = 12) %>%
# scroll_box(width = "100%", height = "500px")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
FAO [label = 'Dataset: \n FAO data', shape = folder, fillcolor = Beige]
ILO [label = 'Dataset: \n ILO data',  shape = folder, fillcolor = Beige]
UNDP [label = 'Dataset: \n ILO data',  shape = folder, fillcolor = Beige]
WB [label = 'Dataset: \n World Bank data',  shape = folder, fillcolor = Beige]
JMP [label = 'Dataset: \n JMP(WHO/UNICEF) data',  shape = folder, fillcolor = Beige]
WRI  [label = 'Dataset: \n WORLD_RESOURCES_INSTITUTE data',  shape = folder, fillcolor = Beige]
# data tables
aquaexter [label = 'Data table: \n aqua_external_source data',  shape = folder, fillcolor = LightGrey]
# processing
externalmodule [label = ' Processing: \n faoswsAquastatExternal using:\n 1. Download and read in the data, \n 2. Reshape data \n to an long-format dataset, \n 3. Map out origin codes to AQUASTAT codes, \n 4. Retain relevant elements', shape = rectangle, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n External data in an SWS compliant dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{FAO, ILO, UNDP, WB, JMP, WRI} -> externalmodule -> Output
{aquaexter} -> externalmodule
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
FAO [label = 'Dataset: \n FAO data', shape = folder, fillcolor = Beige]
ILO [label = 'Dataset: \n ILO data',  shape = folder, fillcolor = Beige]
UNDP [label = 'Dataset: \n ILO data',  shape = folder, fillcolor = Beige]
WB [label = 'Dataset: \n World Bank data',  shape = folder, fillcolor = Beige]
JMP [label = 'Dataset: \n JMP(WHO/UNICEF) data',  shape = folder, fillcolor = Beige]
WRI  [label = 'Dataset: \n WORLD_RESOURCES_INSTITUTE data',  shape = folder, fillcolor = Beige]
# data tables
aquaexter [label = 'Data table: \n aqua_external_source data',  shape = folder, fillcolor = LightGrey]
# processing
externalmodule [label = ' Processing: \n faoswsAquastatExternal using:\n 1. Download and read in the data, \n 2. Reshape data \n to an long-format dataset, \n 3. Map out origin codes to AQUASTAT codes, \n 4. Retain relevant elements', shape = rectangle, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n External data in an SWS compliant dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{FAO, ILO, UNDP, WB, JMP, WRI} -> externalmodule -> Output
{aquaexter} -> externalmodule
}")
require(data.table)
require(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d = d[lta == 1L, .(element_code, element_name, disseminated, calculated, source)]
knitr::kable(d, escape = F, table.attr='class="table-fixed-header"') %>%
kableExtra::kable_styling(font_size = 12)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/calculation_rule.csv")
#d = d[lta == 1L, .(element_code, element_name)]
knitr::kable(d,
caption = paste("Long-term average variables in AQUASTAT."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/calculation_rule.csv")
d = d[,.(calculation_rule, indicator_name, component_name)]
knitr::kable(d,
caption = paste("Long-term average variables in AQUASTAT."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Read in SWS aquastat_legacy dataset \n 2. Calculation \n using calculation_rule data table, \n 2. Equate the right LTA values \n in each geographicAreaM49 - aquastatElement combination ', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_baseline dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
{refer, calc} -> processing
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Read in SWS aquastat_legacy dataset \n 2. Calculation \n using calculation_rule data table, \n 2. Equate the right LTA values \n in each geographicAreaM49 - aquastatElement combination ', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_baseline dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Read in SWS aquastat_legacy dataset \n 2. Calculation \n using calculation_rule data table, \n 2. Equate the right LTA values \n in each geographicAreaM49 - aquastatElement combination ', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_baseline dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Read in SWS aquastat_legacy dataset \n 2. Calculation \n using calculation_rule data table, \n 2. Equate the right LTA values \n in each geographicAreaM49 - aquastatElement combination ', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_baseline dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
knitr::include_graphics("images/newquery.jpg")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Input [label = 'Dataset: \n SWS aquastat_legacy \n coming from the \n old AQUASTAT Working System', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Read in SWS aquastat_legacy dataset \n 2. Calculation \n using calculation_rule data table, \n 2. Equate the right LTA values \n in each geographicAreaM49 - aquastatElement combination ', fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_baseline dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_baseline dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Input} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
knitr::include_graphics("images/plugin.jpg")
require(dplyr)
require(data.table)
d = data.table::fread("tables/daf4157.csv")
knitr::kable(x = d,
caption = paste("LTA correction in Afghanistan on the element 'Total internal renewable water resources (IRWR) [10^9 m3/year]'"),
booktabs = TRUE)
require(dplyr)
require(data.table)
d = data.table::fread("tables/daf4157.csv")
knitr::kable(d,
escape = TRUE,
table.attr='class="table-fixed-header"',
caption = paste("An example of LTA correction by the module."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(dplyr)
require(data.table)
require(kableExtra)
d = data.table::fread("tables/daf4157.csv")
knitr::kable(d,
escape = TRUE,
table.attr='class="table-fixed-header"',
caption = paste("An example of LTA correction by the module."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("Flag conversion from AQUASTAT to SWS "),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/primary_variable.csv")
knitr::kable(x = d,
caption = paste("Indicators which the primary variable rule was applied to after the calculations"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatBaseline module"),
booktabs = TRUE)
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_baseline \n from the faoswsAquastatBaseline module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_baseline \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Calculations, \n 4. Imputations, \n 5. Recalculations, n\6. Flag conversion', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_baseline \n from the faoswsAquastatBaseline module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_baseline \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Calculations, \n 4. Imputations, \n 5. Recalculations, n\ 6. Flag conversion', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = LR]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
aquabase [label = 'Dataset: \n SWS aquastat_baseline \n from the faoswsAquastatBaseline module', shape = folder, fillcolor = Beige]
aquaquest [label = 'Dataset: \n SWS aquastat_questionnaire \n from the questionnaire harvester', shape = folder, fillcolor = Beige]
aquaexter [label = 'Dataset: \n SWS aquastat_external \n from the faoswsAquastatExternal module', shape = folder, fillcolor = Beige]
# data tables
refer [label = 'Data table: \n SWS aquastat_reference data table', shape = folder, fillcolor = LightGrey]
calc [label = 'Data table: \n SWS calculation_rule data table', shape = folder, fillcolor = LightGrey]
# processing
Processing [label = 'Processing: \n 1. Harmonize dimensions \n 2. Replace/Update aquastat_baseline \n with aquastat_questionnaire \n and aquastat_external dataset, \n 3. Calculations, \n 4. Imputations, \n 5. Recalculations, \n 6. Flag conversion', shape = square, fillcolor = LightBlue]
# Output
Output [label = 'Dataset: \n aquastat_update dataset', shape = folder, fillcolor = Beige]
#Save
Save [label = 'Database: \n aquastat_update dataset \n saved in the SWS', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{aquaquest, aquabase, aquaexter} -> Processing  -> Output -> Save
{refer, calc} -> Processing
}")
library(data.table)
library(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d <- d[,.(element_code, element_name, disseminated, calculated, source)]
# knitr::kable(x = d[calculated %in% 'C'],
#              caption = paste("AQUASTAT indicators"),
#              booktabs = TRUE)
knitr::kable(d,
caption = paste("AQUASTAT indicators"),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
library(data.table)
library(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d <- d[calculated %in% 'C',.(element_code, element_name, disseminated, calculated, source)]
# knitr::kable(x = d[],
#              caption = paste("AQUASTAT indicators"),
#              booktabs = TRUE)
knitr::kable(d,
caption = paste("AQUASTAT indicators"),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d <- d[Source == 'O']
d <- d[,.(element_code, element_name, disseminated, calculated, source)]
knitr::kable(d,
caption = paste("AQUASTAT indicators (derived) calculated by AQUASTAT"),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(d[calculated %in% 'V'],
caption = paste("AQUASTAT variable codes and names actually collected."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
library(data.table)
library(kableExtra)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(d[calculated %in% 'V'],
caption = paste("AQUASTAT variable codes and names actually collected."),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 12)
