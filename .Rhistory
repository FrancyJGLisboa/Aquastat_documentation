require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagobs.csv")
knitr::kable(x = d,
caption = paste("AQUASTAT to SWS flag conversion"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d %>% dplyr::mutate(flagObservationStatus = ifelse(is.na(flagObservationStatus), 'blank', flagObservationStatus)),
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatBaseline module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d ,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatBaseline module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatBaseline module"),
booktabs = TRUE)
require(dplyr)
d = readr::read_csv("tables/flagmeth.csv")
knitr::kable(x = d,
caption = paste("flagObservationStatus - flagMethod combination brought by the faoswsAquastatBaseline module"),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[, Source := NULL],
caption = paste("The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[calculated == 'V', Source := NULL],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[, Source := NULL],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[calculated %in% 'V',  Source := NULL],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source : NULL]
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT element codes, names, dissemination status, variable/indicator status, and source."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT variable codes and names collected by AQUASTAT status."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'D'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT variable codes and names collected by AQUASTAT status."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'C'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT variable codes and names collected by AQUASTAT status."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'C'],
caption = paste("The aquastat_reference SWS data table. The description of AQUASTAT variable codes and names collected by AQUASTAT status."),
booktabs = TRUE)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The SWS aquastat_reference data table. AQUASTAT variable codes and names actually collected"),
booktabs = TRUE) %>%
kable_styling(font_size = 7)
install.packages('kableExtra')
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The SWS aquastat_reference data table. AQUASTAT variable codes and names actually collected"),
booktabs = TRUE) %>%
kableExtra::kable_styling(font_size = 7)
require(data.table)
d = data.table::fread("tables/aquastat_meta_FL_sources.csv")
d[, Source := NULL]
knitr::kable(x = d[calculated %in% 'V'],
caption = paste("The SWS aquastat_reference data table. AQUASTAT variable codes and names actually collected"),
booktabs = TRUE)
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
SWSdb [label = 'Storage \n Input data living in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive [label = 'Storage \n Input data living in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession [label = 'Storage \n Input data living in the session', shape = folder, fillcolor = Beige]
SWSdb2 [label = 'Storage \n Output data saved in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive2 [label = 'Storage \n Output data saved in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession2 [label = 'Storage \n Output data saved in the session', shape = folder, fillcolor = Beige]
dataset1 [label = 'Input \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
module [label = 'R module \n data processing and analysis', shape = square, fillcolor = LightBlue]
datatable1 [label = 'Data table(s) \n (auxiliary information)', shape = folder, fillcolor = Green]
dataset2 [label =  'Output \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{SWSdb, SWSsharedrive, SWSsession} -> dataset1 -> module
{datatable1} -> module
dataset2 -> {SWSdb2, SWSsharedrive2, SWSsession2}
{module} -> dataset2
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
SWSdb [label = 'Storage \n Input data living in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive [label = 'Storage \n Input data living in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession [label = 'Storage \n Input data living in the session', shape = folder, fillcolor = Beige]
SWSdb2 [label = 'Storage \n Output data saved in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive2 [label = 'Storage \n Output data saved in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession2 [label = 'Storage \n Output data saved in the session', shape = folder, fillcolor = Beige]
dataset1 [label = 'Input \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
module [label = 'R module \n data processing and analysis', shape = square, fillcolor = LightBlue]
datatable1 [label = 'Data table(s) \n (auxiliary information)', shape = folder, fillcolor = LightGreen]
dataset2 [label =  'Output \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{SWSdb, SWSsharedrive, SWSsession} -> dataset1 -> module
{datatable1} -> module
dataset2 -> {SWSdb2, SWSsharedrive2, SWSsession2}
{module} -> dataset2
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
SWSdb [label = 'Storage \n Input data living in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive [label = 'Storage \n Input data living in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession [label = 'Storage \n Input data living in the session', shape = folder, fillcolor = Beige]
SWSdb2 [label = 'Storage \n Output data saved in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive2 [label = 'Storage \n Output data saved in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession2 [label = 'Storage \n Output data saved in the session', shape = folder, fillcolor = Beige]
dataset1 [label = 'Input \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
module [label = 'R module \n data processing and analysis', shape = square, fillcolor = LightBlue]
datatable1 [label = 'Data table(s) \n (auxiliary information)', shape = folder, fillcolor = LightGrey]
dataset2 [label =  'Output \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{SWSdb, SWSsharedrive, SWSsession} -> dataset1 -> module
{datatable1} -> module
dataset2 -> {SWSdb2, SWSsharedrive2, SWSsession2}
{module} -> dataset2
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
SWSdb [label = 'Input \n data living in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive [label = 'Input \n  data living in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession [label = 'Input \n  data living in the session', shape = folder, fillcolor = Beige]
SWSdb2 [label = 'Output \n  data saved in SWS datatabe', shape = folder, fillcolor = Beige]
SWSsharedrive2 [label = 'Output \n  data saved in the SWS share drive', shape = folder, fillcolor = Beige]
SWSsession2 [label = 'Output \n  data saved in the session', shape = folder, fillcolor = Beige]
dataset1 [label = 'Input \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
module [label = 'R module \n data processing and analysis', shape = square, fillcolor = LightBlue]
datatable1 [label = 'Data table(s) \n (auxiliary information)', shape = folder, fillcolor = LightGrey]
dataset2 [label =  'Output \n long-format four-to-six dimensional dataset', shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{SWSdb, SWSsharedrive, SWSsession} -> dataset1 -> module
{datatable1} -> module
dataset2 -> {SWSdb2, SWSsharedrive2, SWSsession2}
{module} -> dataset2
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
Literature [label = 'Source: \n Data from literature', shape = folder, fillcolor = Beige]
otherDB [label = 'Source: \n Da from other databases', shape = folder, fillcolor = Beige]
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
AWS [label = 'Database: \n Aquastat Working System', shape = folder, fillcolor = Beige]
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: \n 1. geographicAreaM49, 2. aquastatElement, 3. timePointYears, 4. flagObservationStatus or flagAquastat', shape = folder, fillcolor = Beige]
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rbase [label = 'Processing: \n faoswsAquastatBaseline \n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightBlue]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
{Literature, otherDB } -> AWS
{Quest} -> QH
{QH, AWS} -> SWS
{SWS, FAOSTATDB} -> Rbase
{Rbase} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
library(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Literature [label = 'Source: \n Data from literature', shape = folder, fillcolor = Beige]
# otherDB [label = 'Source: \n Da from other databases', shape = folder, fillcolor = Beige]
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# AWS [label = 'Database: \n Aquastat Working System', shape = folder, fillcolor = Beige]
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: \n 1. geographicAreaM49, \n 2. measuredElement, \n 3. timePointYears, \n 4. flagObservationStatus or flagAquastat', shape = folder, fillcolor = Beige]
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rbase [label = 'Processing: \n faoswsAquastatBaseline \n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightBlue]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH
{QH} -> SWS
{SWS, FAOSTATDB} -> Rbase
{Rbase} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Literature [label = 'Source: \n Data from literature', shape = folder, fillcolor = Beige]
# otherDB [label = 'Source: \n Da from other databases', shape = folder, fillcolor = Beige]
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# AWS [label = 'Database: \n Aquastat Working System', shape = folder, fillcolor = Beige]
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: \n 1. geographicAreaM49, \n 2. measuredElement, \n 3. timePointYears, \n 4. flagObservationStatus or flagAquastat', shape = folder, fillcolor = Beige]
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rbase [label = 'Processing: \n faoswsAquastatBaseline \n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightBlue]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH
{QH} -> SWS
{SWS, FAOSTATDB} -> Rbase
{Rbase} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Literature [label = 'Source: \n Data from literature', shape = folder, fillcolor = Beige]
# otherDB [label = 'Source: \n Da from other databases', shape = folder, fillcolor = Beige]
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# AWS [label = 'Database: \n Aquastat Working System', shape = folder, fillcolor = Beige]
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rbase [label = 'Processing: \n faoswsAquastatBaseline \n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightBlue]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH
{QH} -> SWS
{SWS, FAOSTATDB} -> Rbase
{Rbase} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rbase [label = 'Processing: \n faoswsAquastatBaseline \n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightBlue]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rbase
{Rbase} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightRed]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = Purple]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightRed]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = Purple]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWS [label = 'Database: \n Statistical Working System \n Dataset MUST have: 1. geographicAreaM49, 2. measuredElement, 3. timePointYears,  4. flagObservationStatus, 5. flagMethod', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Output: \n faoswsAquastatBaseline output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWS
{SWS, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWSnew [label = 'Input: \n New data to be updated', shape = folder, fillcolor = LightBlue]
SWSbase [label = 'Input: \n faoswsAquastatbaseline output', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Input: \n faoswsAquastatUpdate output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatBaseline output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWSnew
{SWSbase, SWSnew, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
require(DiagrammeR)
DiagrammeR::grViz("digraph {
graph [layout = dot, rankdir = TB]
# define the global styles of the nodes. We can override these in box if we wish
node [shape = rectangle, style = filled, fillcolor = Linen]
# Inputs
Quest[label = 'Source: \n Data from questionnaire', shape = folder, fillcolor = Beige]
# Processing
QH [label = 'Processing: \n Questionnaire harvesting \n by CIO - SWS', shape = folder, fillcolor = LightBlue]
# Input
SWSnew [label = 'Input: \n New data to be updated', shape = folder, fillcolor = LightBlue]
SWSbase [label = 'Input: \n faoswsAquastatbaseline output', shape = folder, fillcolor = Beige]
# Input
FAOSTATDB [label = 'Source: \n FAOSTAT database', shape = folder, fillcolor = Beige]
Rup [label = 'Processing: \n faoswsAquastatUpdate module\n 1. FAOSTAT annexation, 2. Calculation, 3. Imputation, 4. Recalculation, 5. Flag conversion', fillcolor = LightGrey]
baselinedata [label = 'Input: \n faoswsAquastatUpdate output', shape = folder, fillcolor = Beige]
Rvali [label = 'Processing: \n find errors in \n faoswsAquastatUpdate output \n using faoswsAquastatValidation module', fillcolor = LightBlue]
TUvalidation [label = 'QA/QC: \n manual check of \n faoswsAquastatValidation output \n by the technical unit', fillcolor = LightBlue]
Dissemination [label = 'Output: \n dissemination of the validated/corrected \n faoswsAquastatBaseline output' shape = folder, fillcolor = Beige]
# Flow
# edge definitions with the node IDs
# {Literature, otherDB } -> AWS
{Quest} -> QH -> SWSnew
{SWSbase, SWSnew, FAOSTATDB} -> Rup
{Rup} -> baselinedata -> Rvali -> TUvalidation -> Dissemination
}")
